HTTP(HyperText Transfer Protocol)

## 모든 것이 HTTP
HTTP 메세지에 모든 것을 전송
* HTML, TEXT
* IMAGE, 음성, 영상, 파일
* JSON, XML(API)
* 거의 모든 형태의 데이터 전송 가능
* 서버 간에 데이터를 주고 받을 때도 대부분 HTTP 사용

HTTP 역사
* HTTP/0.9 1991년 : GET 메서드만 지원, HTTP 헤더X
* HTTP/1.0 1996년 : 메서드, 헤더 추가
* HTTP/1.1 1997년 : 가장 많이 사용, 우리에게 가장 중요한 버전
	- RFC2068(1997) -> RFC2616(1999) -> RFC7230~7235(2014)
* HTTP/2 2015년 : 성능 개선
* HTTP/3 진행중 : TCP 대신에 UDP 사용, 성능 개선

*RFC?
RFC란 "Request for Comments"의 약어로, 인터넷 공학과 연구의 표준화를 위한 문서 시리즈를 의미합니다. 이 문서들은 인터넷 프로토콜, 애플리케이션 및 기술에 대한 설계, 개발 및 사용을 다루며, 인터넷의 기반 기술을 표준화하고 발전시키는 데 사용됩니다.

기반 프로토콜
* TCP : HTTP/1.1, HTTP/2
* UDP : HTTP/3
=> UDP 프로토콜위에 어플리케이션 레벨에서 성능을 최적화하도록 새로 설계해서 나온 것
* 현재 HTTP/1.1 주로 사용
	* HTTP/2, HTTP/3도 점점 증가
------------------------------------------------------
## HTTP 특징
* 클라이언트 서버 구조
* 무상태 프로토콜(stateless), 비연결성
* HTTP 메세지
* 단순함, 확장 가능

### 클라이언트 서버 구조
* Request Response 구조
* 클라이언트는 서버에 요청을 보내고, 응답을 대기
* 서버가 요청에 대한 결과를 만들어서 응답

### 무상태 프로토콜(Stateless)
* 서버가 클라이언트의 상태를 보존X
* 장점 : 서버 확장성 높음(스케일 아웃)
* 단점 : 클라이언트가 추가 데이터 전송

	###  Stateful, Stateless 차이 정리
	* 상태 유지 : 중간에 다른 점원으로 바뀌면 안된다.
	(중간에 다른 점원으로 바뀔 때 상태 정보를 다른 점원에게 미리 알려줘야 한다.)

	* 무상태 
	: 중간에 다른 점원으로 바뀌어도 된다.
	: 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
	* 무상태는 응답 서버를 쉽게 바꿀 수 있다.
	(상태 유지를 하지 않아도 되기 때문에)
	-> 무한한 서버 증설 가능

















   